### Containerization
- collection of software processes in one particular box with access to an OS resources shared between other containers

- Container is an image with an execution environment and having set of instructions

- Class --> Image and object --> container

- Docker enginer: runtime packaging tool on Docker hosts
- Docker hub --> hub where images are stored

- Benifits: portable and packaged in standard way

### Kubernetes
- provision hosts
- Starts containers on hosts
- restart failing containers
- scale the clusrer up and down

- Kubernetes is a platform to schedule and run containers on cluster of VMs, bare metal, cloud
- Kubernetes can be used with Docker, where Docker can be used to develop and build applications and then Kubernetes can be used to run these applications on infrastructure


### Features
- multi-host container scheduling
  - done by kube-scheduler
  - assigns pods to nodes at runtime
  - check resources, quality of services etc before scheduling

- Scalablity & Availability
  - masters can be deployed in highly avaialble configurations
  - multi-region deployments available

- supports 5000 nodes clusters
  - 150000 total pods
  - pods can be horizontally scaled
  - Plug and play architecture, which allows to extend architecture whenever needed

- Registeration
  - nodes can be registered to kubernetes master 

- Service Discovery
  - Services can be automatically detected via DNS

- persistent storage
 - much requested and important feature for containers
 - Pods can use persistent volume to store data
 - Data retained across pod restarts and crashes



- Application Upgrade and Downgrade
 - Based on need the applicaitons can be upgraded or downgraded

- Logging 
 - applciation monitoring
 - health check
 - inbuilt logging framework

### Architecuture
- Master node
 - API server
 - Scheduler
 - Controller manager

 - kubectl is command line tool to interact with master node
 - kubectl uses kubeconfig to read servers informations 
 - master node uses etcd as clsuter database to store all informations 
 - worker nodes are managed by master node in 2 way communications
 - kubelet is the agent running on worker node to interact and communicate with containers
 - pods contains multiple containers groups that share OS resources

 - kubeproxy is used for all network related things



### Basic bulidling blocks
# Nodes
- Node servers as a worker machine in K8s cluster
- node can be a physical computer or a VM

- Requirements
 - Each node must have a kubelet running
 - Container tooling like docker
 - kube-proxy process running
 - Supervisord process running that restart components
 - in production we should use 3 node clusters at least to run kubernetes

- Minikube 
 - lighweight kubernetes implementaion that creates a VM on local m/c and deploys a simple cluster containing only one node


# Pods
- A simplest unit that can be interacted with. You can create, deploy and delete pods and it represnts one running process on your cluster

- Requirements:
 - docker applicaiton container
 - Storage resources
 - Unique n/w ip
 - options that governs how the container(s) should run- Pods are ephemereal and disposable
- Never self-heal and not restarted by scheduler it self
- Never create pods by just themselves
- use higher-level constructs
- Pods are started by some controllers

- Pods states
 - Pending - pod had been accepted by kubernetes system but a container had not been created yet
 - Running - pod had been scheduled over node, all it's containers are created and at least one of it's contianer is in running state
 - Succeeded - all the containers in pods are exited with exist status 0
 - Failed - all the containers in pod are exeucted and at least one container is failed with non zero exit status
 - CrashLoopBackOff - Contianer is failed to start due to some region and kubernetes tried over and over to start the pod



### Deployments, jobs and services
- Benifits of controllers
 - application reliablity - multiple instances of applications running prevent problems if one or more instance of application fails  
 - Scaling - if pod experience larger volume data kubernetes allows the pod to scale
 - Load balancing - when multiple pods are running, traffic can be distributed to other 
pods doesn't overload one single pod

- Kinds of controllers
 - ReplicaSets
 - Deployments
 - DaemonSets
 - Jobs
 - Services


- ReplicaSet
 - Ensure that a specified no. of replicas for a pod are running at all times
 - if a pod crashed then replicaSet will ensure to start a new pod to ensure the no. of replica pod should be same as declared 
 - ReplicaSet cannot be declared by itself and shoudl be used in deployment set

- Deployments
 - Deployment controlled provides declarative updates for pods and ReplicaSets
 - This mean you can defined a desired state of deployment in a YAML file and deployment controlled will align the actual state to match
 - Deployment sets can be defined to create new replicaSet or replace the existing once
 - Deployment manges ReplicaSet, which manages pods
 - Pod management - running a replicaset allows us to deploy a number of pods and check their status as a single  unit
 - Scaling of ReplicaSet : scales out the pods and allows for the deployment to handle more traffic
 - Pause a deployment make changes and resume the deployment set
 - A new replicaSet will be started everytime after pause-resume
 - Pausing a deployment means only updates are paused but traffic is still running
 - Status : easy way to check health of pods

- DaemonSets:
 - Ensures that all nodes run a copy of a specific pod
 - As nodes are added or removed from the cluster, a DaemonSet will add or remove the required pods
 - Deleting a DaemonSet will also cleaup the all the pods it's created
 - a typical use case of DaemonSet is to run a single log aggregator or a monitoring agent on a node

- Jobs:
 - Supervsor process for pods carrying out batch jobs
 - Run individual processes that run once and complete successfully
 - Jobs are run in cronjob to run a specific process at specific time


- Services: 
 - Communication b/w one set of deployments with another
 - When a service is created it's assigned with unique IP address which will never change throught out the lifetime of service 
 - Pods are then configured to talk to services and rely on service IP for any communication
 - Services are really important because they allow one set of pods to communicate with other set of pods
 - in simple form, it's best practice to use a service when you allow one deployment ot talk to another deploymnet
 - If frontend pods needs to talk to backend pods then it should communicate via Service IP, becuase backend pods IP may chnages anytime
 - Internal Service : IP is only reachable within cluster, also known as cluter IP in K8s
 - External Service : Endpoint avaialble through node ip:port (called NodePort)
 - LoadBalancer : Exposes application to internet with a load balancer



### Labels, selectors and namespaces
Labels:
 - Labels are key/value pairs that are attached to objects like pods, services and deployments.
 - Labels are for users of kubernetes to identify attributes for objects
 - Label keys are unique for objects
 - Labels are generally used with selectors

Selectors: 
 - Equality selectors : Equals and not equals
 - Set based selectors : In, NOTIN and EXISTS

- labels and selectors are used with kubectl to lister or filter objects

Namespaces: 
- Great for large enterprises


### Kubelet and KubeProxy:
# Kubelet
- Kubelet is "Kubernetes node agent" that runs on each node
- communicate with API server to see if pods have been assigned to nodes
- Executes pods containers via a container engine
- mounts and runs pod volumes and secrets
- Execute health check to identify pod/node status
- Podspec: YAML file that describe a pod
- Kubelet takes set of Prodspecs and ensures that the containers in those Prodspec are running and healthy
- Kubelet only manages the containers createdby API server - not any other one

# KubeProxy : N/w Proxy
- process run on all worker nodes
- Reflects services as defined on each node and can to simple n/w stream or round robin forwarding across a set of backends
3 modes:
 - User space mode - most common
 - IPtables mode
 - IPVs mode  
- Services are defnied against the API server, kube-proxy watches the API server for the addition and removal of services
- For each new service, kube-proxy opens a randomly choosen port on the local node
- connections mage to the choosen port are proxied to one of the corresponding back-end pods

### Install
- Docker and Hypervisor should be installed already for kubernetes


### Hello World
- minikube start
- virtualbox (will show minikube running)
- kubectl get nodes
- kubectl run hw --image=<name> --port=80
- kubectl get deployments
- kubectl get rs (replicaset)
- kubectl get pods
- kubectl expose deployment <name> --type=NodePortkubectl get services
- minikube service <service name>  --> see application up and running
-

### Breaking hello World
- kubectl get all
- kubectl get deploy/<name> -o yaml
- kubectl get services
- kubectl create -f <yaml file>


### Scaling Hello world
- kubectl scale --replicas=3 deploy/<name>
- kubectl get deploy/<name>




### Add, Change and Delete labels
- kubectl get pods --show-labels
- kubectl label pod/<name> app=<new label name> --overwrite
- kubectl label pod/<name> app- => remove label

### Working with labels
- kubectl get pods --selector env=production
- kubectl get pods --selector dev-lead=name,env=staging
- kubectl get pods --selector dev-lead!=name,env=staging  --> NOT EQUAL
- kubectl get pods -l release-version in (1.0.2.0)'
- kubectl get pods -l release-version notin (1.0.2.0)'
- kubectl delete pods -l dev-lead=<name>
- kubectl get pods --show-labels

### Application health checks
- kubectl describe po/<pod name>


### Upgrades
- kubectl create -f <name> --record 
     --> record roll out history
- kubectl set image deploymnet/<name> helloworld=<new name of image>
- kubectl rollout undo deployment/<name>


### Troubleshooting
- kubectl describe deployment <deploy name>
- kebectl describe pod <pod name>
- kubectl logs <pod name>
- kubectl exec -it <pod name> /bin/bash
- kubectl exec -it <pod name> -c <pod2 name>/bin/bash --> in case multiple pods


### Dashboard
- Allow to visualize and monitor cluster for operational purpose
- minikube addons list
- minikube dashboard
- minikube addons enable heapster


### Configurations
- kubectl create configmap logger --from-literal=log_level=debug
- kubectl get configmaps
- kubectl get configmap/logger -o yaml
- kubectl logs <pod name>


### Secret data
- kubectl create secret generic apikey --from-literal=api_key=1234567
- kubectl get secret apikey -o yaml


### Running jobs
- kubectl get jobs
- kubectl get cronjobs


### Running stateful applications
- kubectl get daemonset
- stateful sets manages the deployment and scaling for set of pods
- provides guarantees and ordering of pods
- kubectl get statefulsets



### Kubernetes in Production
- using kubeadm tool


### Monitoring and Logging
- kubectl logs
- Stdout
- cAdvisor
- Heapster
- Prometheus

### Authentication & Authorization
- normal users - intereact with systems
- service accounts - account managed by K8s API
- username, UID, group, extra fields
- Authenticate checks that a user have access to system or not
- Authorization checks that user can perform an action in the system or not

Methods:
- client cert
- Token file 
- OpenID connect
- Webhook Tokens